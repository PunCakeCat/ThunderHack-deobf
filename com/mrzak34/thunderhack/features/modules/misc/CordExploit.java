//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\38096\Downloads\Minecraft-Deobfuscator3000-master\1.12 stable mappings"!

//Decompiled by Procyon!

package com.mrzak34.thunderhack.features.modules.misc;

import com.mrzak34.thunderhack.features.modules.*;
import com.mrzak34.thunderhack.features.setting.*;
import net.minecraft.entity.player.*;
import net.minecraft.util.math.*;
import com.mrzak34.thunderhack.event.events.*;
import com.mrzak34.thunderhack.features.command.*;
import net.minecraft.init.*;
import net.minecraft.network.play.server.*;
import net.minecraft.entity.passive.*;
import net.minecraft.entity.*;
import net.minecraftforge.fml.common.eventhandler.*;

public class CordExploit extends Module
{
    public Setting<Boolean> BossDetector;
    public Setting<Boolean> logLightning;
    public Setting<Boolean> logWolf;
    public Setting<Boolean> logPlayer;
    public Setting<Integer> minLightningDist;
    public Setting<Integer> minWolfDist;
    public Setting<Integer> minPlayerDist;
    
    public CordExploit() {
        super("CordExploit", "\u0437\u0432\u0443\u043a\u043e\u0432\u044b\u0435 \u044d\u043a\u0441\u043f\u043b\u043e\u0438\u0442\u044b", Category.MISC, true, false, false);
        this.BossDetector = (Setting<Boolean>)this.register(new Setting("BossDetector", (T)true));
        this.logLightning = (Setting<Boolean>)this.register(new Setting("Lightning", (T)true));
        this.logWolf = (Setting<Boolean>)this.register(new Setting("Wolf", (T)true));
        this.logPlayer = (Setting<Boolean>)this.register(new Setting("Player", (T)true));
        this.minLightningDist = (Setting<Integer>)this.register(new Setting("minLightningDist", (T)32, (T)0, (T)100, v -> this.logLightning.getValue()));
        this.minWolfDist = (Setting<Integer>)this.register(new Setting("minWolfDist", (T)256, (T)0, (T)1024, v -> this.logWolf.getValue()));
        this.minPlayerDist = (Setting<Integer>)this.register(new Setting("minPlayerDist", (T)256, (T)0, (T)1024, v -> this.logPlayer.getValue()));
    }
    
    private boolean pastDistance(final EntityPlayer player, final BlockPos pos, final double dist) {
        return player.getDistanceSqToCenter(pos) >= Math.pow(dist, 2.0);
    }
    
    @SubscribeEvent
    public void onPacketReceive(final PacketEvent.Receive e) {
        if (this.BossDetector.getValue() && e.getPacket() instanceof SPacketEffect) {
            final SPacketEffect sPacketEffect = (SPacketEffect)e.getPacket();
            final BlockPos pos = new BlockPos(sPacketEffect.getSoundPos().x, sPacketEffect.getSoundPos().y, sPacketEffect.getSoundPos().z);
            switch (sPacketEffect.getSoundType()) {
                case 1023: {
                    Command.sendMessage("Wither Spawned " + pos.x + " Y:" + pos.y + " Z:" + pos.z);
                    break;
                }
                case 1028: {
                    Command.sendMessage("Ender Dragon Defeated " + pos.x + " Y:" + pos.y + " Z:" + pos.z);
                    break;
                }
                case 1038: {
                    Command.sendMessage("End Portal Activated " + pos.x + " Y:" + pos.y + " Z:" + pos.z);
                    break;
                }
            }
        }
        if (this.logLightning.getValue() && e.getPacket() instanceof SPacketSoundEffect) {
            final SPacketSoundEffect packet2 = (SPacketSoundEffect)e.getPacket();
            if (packet2.getSound() != SoundEvents.ENTITY_LIGHTNING_THUNDER) {
                return;
            }
            final BlockPos pos = new BlockPos(packet2.getX(), packet2.getY(), packet2.getZ());
            if (this.pastDistance((EntityPlayer)CordExploit.mc.player, pos, this.minLightningDist.getValue())) {
                Command.sendMessage("Lightning strike At X:" + pos.x + " Y:" + pos.y + " Z:" + pos.z);
            }
        }
        else if (e.getPacket() instanceof SPacketEntityTeleport) {
            final SPacketEntityTeleport sPacketEntityTeleport = (SPacketEntityTeleport)e.getPacket();
            final Entity teleporting = CordExploit.mc.world.getEntityByID(sPacketEntityTeleport.getEntityId());
            final BlockPos pos2 = new BlockPos(sPacketEntityTeleport.getX(), sPacketEntityTeleport.getY(), sPacketEntityTeleport.getZ());
            if (this.logWolf.getValue() && teleporting instanceof EntityWolf) {
                if (this.pastDistance((EntityPlayer)CordExploit.mc.player, pos2, this.minWolfDist.getValue())) {
                    Command.sendMessage("Wolf Teleport At X:" + pos2.x + " Y:" + pos2.y + " Z:" + pos2.z);
                }
            }
            else if (this.logPlayer.getValue() && teleporting instanceof EntityPlayer && this.pastDistance((EntityPlayer)CordExploit.mc.player, pos2, this.minPlayerDist.getValue())) {
                Command.sendMessage(teleporting.getName() + " Teleported to X:" + pos2.x + " Y:" + pos2.y + " Z:" + pos2.z);
            }
        }
    }
}
